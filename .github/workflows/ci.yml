name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: # Allow manual triggering

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  CACHE_KEY_PREFIX: 'lumos-v1'

jobs:
  # 📋 Code Quality & Linting
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🔍 Run ESLint
        run: npm run lint

      - name: 📋 TypeScript compilation check
        run: npm run typecheck

      - name: 🎨 Check code formatting
        run: npx prettier --check .

  # 🧪 Unit & Integration Tests
  test:
    name: 🧪 Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🧪 Run unit tests
        run: npm run test:coverage

      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          fail_ci_if_error: false

  # 🎭 E2E Tests with Playwright
  e2e:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps

      - name: 🏗️ Build project
        run: npm run build

      - name: 🎭 Run Playwright tests
        run: npm run test:playwright

      - name: 📤 Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  # 🔒 Security Scanning
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🔒 Run security audit
        run: npm audit --audit-level high

      - name: 🔍 CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # 🏗️ Build & Package
  build:
    name: 🏗️ Build & Package
    runs-on: ubuntu-latest
    needs: [quality, test]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🏗️ Build project
        run: npm run build

      - name: 📦 Package for distribution
        run: npm pack

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            dist/
            *.tgz
          retention-days: 30

  # ⚡ Performance Benchmarks
  benchmark:
    name: ⚡ Performance Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: [build]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 🔧 Install dependencies
        run: npm ci

      - name: 🏗️ Build project
        run: npm run build

      - name: ⚡ Run benchmarks
        run: npm run benchmark

      - name: 📊 Comment benchmark results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            if (fs.existsSync('benchmark-results.json')) {
              const results = JSON.parse(fs.readFileSync('benchmark-results.json', 'utf8'));
              const comment = `## ⚡ Performance Benchmark Results
              
              | Operation | Duration | Memory Usage | Status |
              |-----------|----------|--------------|--------|
              ${results.map(r => `| ${r.name} | ${r.duration}ms | ${r.memory}MB | ${r.status} |`).join('\n')}
              
              _Benchmarks run on commit ${context.sha}_`;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

  # 🎯 Integration Status Check
  status:
    name: 🎯 CI Status
    runs-on: ubuntu-latest
    needs: [quality, test, e2e, security, build]
    if: always()
    steps:
      - name: 🎯 Check all jobs status
        run: |
          if [[ "${{ needs.quality.result }}" == "failure" || "${{ needs.test.result }}" == "failure" || "${{ needs.e2e.result }}" == "failure" || "${{ needs.security.result }}" == "failure" || "${{ needs.build.result }}" == "failure" ]]; then
            echo "❌ One or more CI jobs failed"
            exit 1
          else
            echo "✅ All CI jobs passed successfully"
          fi
